abline(h = sort(hc$height,decreasing = T)[5],col = "red" ,lwd = 0.5,lty = 2)
dev.off()
clust.vec.rixdiet<-cutree(hc, k = 5)
table(clust.vec.rixdiet)
df.plot = data.frame(cbind(total.estimate[,col.num],"Cluster" = clust.vec.rixdiet))
colnames(df.plot)[1:length(col.num)] = colnames(total.estimate[,col.num])
##meta analysis to plot mean values
df.mean.plot.scale = sapply(1:5, function(x){
colMeans(df.plot[clust.vec.rixdiet == x,1:length(col.num)])
})
df.mean.plot.scale = data.frame(t(df.mean.plot.scale),"Cluster" = 1:5)
colnames(df.mean.plot.scale)[-ncol(df.mean.plot.scale)] = colnames(total.estimate)[col.num]
##plot
tiff("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/cord_diet_mean.tiff", units="in", width=5, height=10, res=300)
print(plot.cord(df.mean.plot.scale,length(col.num),"RIX*Diet")+
scale_color_manual("Mean value",
values = c("lightblue","lightcoral","lightgreen","hotpink2","grey"),
labels = paste0("Cluster",1:5)))
dev.off()
##for each
tiff("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/cord_rixdiet.tiff", units="in", width=5, height=5, res=300)
plot.cord(df.plot,length(col.num),"RIX*Diet")
dev.off()
tiff("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/cord_rixdiet_onlybehav.tiff", units="in", width=5, height=5, res=300)
plot.cord(df.plot,length(col.num),"RIX*Diet",onlybehav = T)
dev.off()
sapply(1:5, function(x){
tiff(paste0("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/cord_rixdiet_cluster",x,".tiff"), units="in", width=5, height=5, res=300)
print(plot.cord.each(df.plot,x,length(col.num),"RIX*Diet"))
dev.off()
tiff(paste0("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/cord_rixdiet_cluster",x,"_onlybehav.tiff"), units="in", width=5, height=5, res=300)
print(plot.cord.each(df.plot,x,length(col.num),"RIX*Diet",onlybehav = T))
dev.off()
})
##pca diet
res.pca<-prcomp(total.estimate[,col.num])
ind.coord <- as.data.frame(get_pca_ind(res.pca)$coord)
ind.coord$cluster <- factor(clust.vec.rixdiet)
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
tiff("~/Desktop/Will/Paper/cluster/figure/behav_cluster/rixdiet/pca_rixdiet.tiff", units="in", width=5, height=5, res=300)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" ),
title = "RIX*Diet effect"
) +
stat_mean(aes(color = cluster), size = 4)
dev.off()
1527.49/2
30022.30+3819.84*2
37661.98-12000-5000
20661.98-9950
995+10711.98*0.12
reticulate::repl_python()
gene_estimate <- readRDS("~/Desktop/Will/Paper/cluster/gene_estimate.rds")[,-1]
behav_estimate <- t(readRDS("~/Desktop/Will/Paper/cluster/behav_estimate.rds"))
colnames(behav_estimate)[38:41] = c("RIX*Diet(LowProtein_RIX8)","RIX*Diet(MethylEnriched_RIX8)"
,"RIX*Diet(VitaminDDeficient_RIX8)","RIX*Diet(Standard_RIX8)")
colnames(gene_estimate) = gsub("_","",colnames(gene_estimate))
colnames(behav_estimate) = gsub("_","",colnames(behav_estimate))
vIEW(t(gene_estimate))
View(t(gene_estimate))
reticulate::repl_python()
```{python}
```{python}
reticulate::repl_python()
reticulate::repl_python()
plot(function(x)dIG(x, mu=1,sigma=.5), 0.01, 6,
main = "{Inverse Gaussian  density mu=1,sigma=0.5}")
install.packages("gamlss.dist")
library(gamlss.dist)
plot(function(x)dIG(x, mu=1,sigma=.5), 0.01, 6,
main = "{Inverse Gaussian  density mu=1,sigma=0.5}")
plot(function(x)dIG(x, mu=1,sigma=1), 0.01, 6,
main = "{Inverse Gaussian  density mu=1,sigma=0.5}")
plot(function(x)dIG(x, mu=1,sigma=1), 0.01, 6,
main = "{Inverse Gaussian  density mu=1,sigma=1}")
plot(function(x)dIG(x, mu=1,sigma=0.2), 0.01, 6,
main = "{Inverse Gaussian  density mu=1,sigma=0.2}")
plot(function(x)dIG(x, mu=1,sigma=0.2), 0.01, 1000,
main = "{Inverse Gaussian  density mu=1,sigma=0.2}")
function(x)dIG(x, mu=1,sigma=0.2)
dIG(0.5, mu=1,sigma=0.2)
dIG(0.1, mu=1,sigma=0.2)
seq(0, 1, length.out= 1000)
x <- qinvgauss(seq(0, 1, length.out= 1000), mean= 1, dispersion= 0.2)
library(statmod)
x <- qinvgauss(seq(0, 1, length.out= 1000), mean= 1, dispersion= 0.2)
plot(seq(0, 1, length.out= 1000),x)
x
x <- dinvgauss(seq(0, 1, length.out= 1000), mean= 1, dispersion= 0.2)
plot(seq(0, 1, length.out= 1000),x)
x <- dinvgauss(seq(0, 1, length.out= 1000), mean= 1, dispersion= 3)
plot(seq(0, 1, length.out= 1000),x)
x <- dinvgauss(seq(0, 1, length.out= 100000), mean= 1, dispersion= 3)
plot(seq(0, 1, length.out= 1000),x)
x
plot(seq(0, 1, length.out= 100000),x)
y = dnorm(x,1,1)
plot(x, y)
x = seq(-4,4, length=100)
y = dnorm(x,1,1)
plot(x, y)
dnorminv<-function(y) sqrt(-2*log(sqrt(2*pi)*y))
plot(x,dnorminv(y))
dinvgaussian(x, 1, 1, log=FALSE)
install.packages("LaplacesDemon")
library(LaplacesDemon)
dinvgaussian(x, 1, 1, log=FALSE)
x
dinvgaussian(seq(0, 15, length.out= 1000), 1, 1, log=FALSE)
dinvgaussian(seq(0.1, 15, length.out= 1000), 1, 1, log=FALSE)
x = seq(0.1, 15, length.out= 1000)
y = dinvgaussian(x, 1, 1, log=FALSE)
plot(x,y)
x = seq(0.1, 15, length.out= 100000)
y = dinvgaussian(x, 1, 1, log=FALSE)
plot(x,y)
x = seq(0.1, 9, length.out= 10000)
y = dinvgaussian(x, 1, 1, log=FALSE)
plot(x,y)
y = dinvgaussian(x, 1, 0.2, log=FALSE)
plot(x,y)
y = dinvgaussian(x, 1, 3, log=FALSE)
plot(x,y)
y = dinvgaussian(x, 3, 3, log=FALSE)
plot(x,y)
x = seq(0.1, 9, length.out= 10000)
y = dinvgaussian(x, 1, 1, log=FALSE)
plot(x,y,main = "IG (1,1)")
x = seq(0.0001, 9, length.out= 10000)
y = dinvgaussian(x, 1, 1, log=FALSE)
plot(x,y,main = "IG (1,1)")
y = dinvgaussian(x, 1, 0.2, log=FALSE)
plot(x,y,main = "IG (1,0.2)")
y = dinvgaussian(x, 1, 3, log=FALSE)
plot(x,y,main = "IG (1,3)")
which.max(y)
x[688]
y = dinvgaussian(x, 3, 1, log=FALSE)
plot(x,y,main = "IG (3,1)")
y = dinvgaussian(x, 3, 3, log=FALSE)
plot(x,y,main = "IG (3,3)")
y = dinvgaussian(x, 1, 1, log=T)
plot(x,y,main = "IG (1,1)")
install.packages("mgcv")
library(mgcv)
rig(100,1,1)
plot(rig(100,1,1))
dIG(x,1,1)
plot(x,dIG(x,1,1))
plot(x,dIG(x,3,1))
plot(x,dIG(x,1,0.2))
plot(x,dIG(x,3,3))
x
x = seq(0, 9, length.out= 1000)
plot(x,dIG(x,3,3))
x = seq(0.0001, 9, length.out= 10000)
plot(x,dIG(x,3,3))
y = dinvgaussian(x, 3, 3, log=FALSE)
plot(x,y,main = "IG (3,3)")
pi
den_ig = function(x,mu,lam){
density = sqrt(lam/(2*pi*x^3)) * exp(-lam * (x - mu)^2/(2*mu^2*x))
return(density)
}
x = seq(0.0001, 9, length.out= 10000)
plot(x,den_ig(x,1,1))
plot(x,den_ig(x,1,3))
plot(x,den_ig(x,3,1))
plot(x,den_ig(x,3,3))
plot(x,den_ig(x,1,1))
x = seq(0.0001, 9, length.out= 10000)
plot(x,den_ig(x,1,1), main = "IG(1,1)")
plot(x,den_ig(x,1,0.2), main = "IG(1,0.2)")
plot(x,den_ig(x,1,3), main = "IG(1,3)")
plot(x,den_ig(x,3,1), main = "IG(3,1)")
plot(x,den_ig(x,3,3), main = "IG(3,3)")
x = seq(0.0001, 4, length.out= 10000)
plot(x,den_ig(x,1,1), main = "IG(1,1)")
plot(x,den_ig(x,1,0.2), main = "IG(1,0.2)")
plot(x,den_ig(x,1,3), main = "IG(1,3)")
plot(x,den_ig(x,3,1), main = "IG(3,1)")
plot(x,den_ig(x,3,3), main = "IG(3,3)")
25-4
21/2
10+4
14+23
37+40
exp(0.62+0.08+0.41+0.87)
7.242743/ 8.242743
exp(0.62-0.08-0.25-1.27)
0.3753111/1.3753111
table.8.3< 􀀀data.frame(expand.grid( marijuana=factor(c("Yes","No"),
table.8.3 = data.frame(expand.grid( marijuana=factor(c("Yes","No"),
levels=c("No","Yes")), cigarette=factor(c("Yes","No"), levels=c("No","Yes")),
alcohol=factor(c("Yes","No"), levels=c("No","Yes"))),
count=c(911,538,44,456,3,43,2,279))
table.8.3
table.8.3 = data.frame(expand.grid( race=factor(c("White","Black"),
levels=c("White","Black")), Gender=factor(c("F","M"), levels=c("F","M")),
party=factor(c("D","R","I"), levels=c("D","R","I"))),
count=c(172,129,130,538,44,456,3,43,2,279,1,3))
table.8.3
table.8.3 = data.frame(expand.grid( race=factor(c("White","Black"),
levels=c("White","Black")), Gender=factor(c("F","M"), levels=c("F","M")),
party=factor(c("D","R","I"), levels=c("D","R","I"))),
count=c(172,56,132,42,129,4,176,6,130,15,127,12))
table.8.3
library(MASS)
tACM< -loglm(count ~ race*Gender*party, data=table.8.3,
param=T,fit=T)
tACM< -loglm(count ~ race*Gender*party, data=table.8.3,
param=T,fit=T)
-loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
loglm
?loglm
tACM< loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tACM
table.8.3
table.8.3
table.8.3 = data.frame(expand.grid( race=factor(c("White","Black"),
levels=c("White","Black")), Gender=factor(c("F","M"), levels=c("F","M")),
party=factor(c("D","R","I"), levels=c("D","R","I"))),
count=c(172,56,132,42,129,4,176,6,130,15,127,12))
library(MASS)
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tACM
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tAC.AM.CM = update(tACM, .~. - alcohol:cigarette:marijuana)
tAC.AM.CM
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tAC.AM.CM = update(tACM, .~. - race:Gender:party)
tAC.AM.CM
summary(tACM)
tACM$lrt
tACM$deviance
tACM$frequencies
tACM$lrt
lo = glm(count ~ race*Gender*party,data=table.8.3)
summary(lo)
lo = glm(count ~ race*Gender*party,family=poisson(link=log),data=table.8.3)
lo
summary(lo)
lo2 = update(lo,.~.-race:Gender:party)
summary(lo2)
tACM
tACM$deviance
tAC.AM.CM$deviance
tAC.AM.CM$nobs
anova(tAC.AM.CM,tACM)
anova(tACM)
coef(tACM)
coefficients(tAC.AM.CM)
lo2
summary(lo2)
table.8.3 = data.frame(expand.grid( race=factor(c("White","Black"),
levels=c("White","Black")), Gender=factor(c("F","M"), levels=c("F","M")),
party=factor(c("D","R","I"), levels=c("R","D","I"))),
count=c(172,56,132,42,129,4,176,6,130,15,127,12))
lo = glm(count ~ race*Gender*party,family=poisson(link=log),data=table.8.3)
lo2 = update(lo,.~.-race:Gender:party)
summary(lo2)
tAC.AM.CM
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tAC.AM.CM = update(tACM, .~. - race:Gender:party)
tAC.AM.CM = update(tACM, .~. - race:Gender)
tAC.AM.CM
tAC.AM.CM
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
tAC.AM.CM = update(tACM, .~. - race:Gender:party)
tAC.AM.CM
update(tACM, .~. - race:Gender)
tACM = loglm(count ~ race*Gender*party, data=table.8.3,param=T,fit=T)
update(tACM, .~. - race:Gender)
summary(lo2)
lo3 = glm(count ~ race + Gender + party + race:party +
Gender:party,family=poisson(link=log),data=table.8.3)
summary(lo3)
summary(lo2)
update(tACM, .~. - race:Gender:party)
exp(2.28)
exp(-0.57)
18396.96+27.29-1900+59.29-13816.2
2767.34-381.72-13.6-234.1-150.17-107.74-46.54-82.75
1750
18396.96-2767.34-1900
13729.62+59.29
788.91+27.29
919+760
728.9+760
1750-1488.9
2767.34-381.72-13.6-234.1-150.17
31-28.14
4*99+95*4+4*99+3*99+374+367+361+361+129+336+1638
5035+264+264
70-40-23
70-40-23
40+23+14
25-4
0.9*40
36+23
59+4
70-59
25-4
21/2
10+4
14+59+23
14+36+23
700/500
2.4/20
6/5
18.5/15
1.2*8
32-29.15
exp(0.1369)
4！
4!
4*3*2
2^4
16/24
12
2/3+1+1/12
4350+2800+11700
19000-3000
3+9+27+27*3+27*3*3
90/263
363-27*3*3
120*0.3422053
27*3*3
90/243
0.37*120
library(gridExtra)
library(grid)
ds_salaries = read.csv("derived_data/salary.csv",row.names = 1)
ds_salaries$remote_ratio = factor(ds_salaries$remote_ratio)
bc = boxcox( lm(salary_in_usd_10K ~  is_22 + experience_level  + remote_ratio  + is_us_company + company_size, ds_salaries))
bc <- boxcox(y ~ x)
lambda <- bc$x[which.max(bc$y)]
library(MASS)
ds_salaries = read.csv("derived_data/salary.csv",row.names = 1)
ds_salaries$remote_ratio = factor(ds_salaries$remote_ratio)
setwd("~/Documents/GitHub/bios-611-project")
library(gridExtra)
library(grid)
library(MASS)
ds_salaries = read.csv("derived_data/salary.csv",row.names = 1)
ds_salaries$remote_ratio = factor(ds_salaries$remote_ratio)
bc = boxcox( lm(salary_in_usd_10K ~  is_22 + experience_level  + remote_ratio  + is_us_company + company_size, ds_salaries))
bc <- boxcox(y ~ x)
lambda <- bc$x[which.max(bc$y)]
lm.model = lm(sqrt(salary_in_usd_10K) ~  is_22 + experience_level  + remote_ratio  + is_us_company + company_size, ds_salaries)
lm.model
summary(lm.model)
grid.table(summary(lm.model))
a = summary(lm.model)
a$coefficients
grid.table(summary(lm.model)$coefficients)
grid.table(summary(lm.model)$coefficients)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
tiff("figure/estimate_table.tiff",units="in", width=5, height=5, res=300)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png")
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 5,weight = 5)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 5,width = 5)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 5,width = 5)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 5)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 50,width = 50)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 500,width = 500)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 250,width = 250)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/estimate_table.png",height = 250,width = 400)
grid.table(round(summary(lm.model)$coefficients,digits = 3))
dev.off()
png("figure/anova_table.tiff",width=250, height=400)
grid.table(tab.anova)
dev.off()
tab.anova = anova(lm.model)
tab.anova = round(tab.anova, digits = 3)
png("figure/anova_table.tiff",width=250, height=400)
grid.table(tab.anova)
dev.off()
png("figure/anova_table.png",width=250, height=400)
grid.table(tab.anova)
dev.off()
png("figure/anova_table.png",width=400, height=250)
grid.table(tab.anova)
dev.off()
png("figure/anova_table.png",width=300, height=200)
grid.table(tab.anova)
dev.off()
png("figure/anova_table.png",width=350, height=150)
grid.table(tab.anova)
dev.off()
png("figure/boxplot1.png")
par(mfrow=c(1,2))
boxplot(ds_salaries$salary_in_usd_10K ~ ds_salaries$is_22, xlab = "Year 2022",ylab = "Salary (in 10K)",main = "After Covid period")
boxplot(ds_salaries$salary_in_usd_10K ~ ds_salaries$experience_level, xlab = "",ylab = "Salary (in 10K)",main = "Experience level")
dev.off()
png("figure/boxplot2.png")
par(mfrow=c(1,3))
boxplot(ds_salaries$salary_in_usd_10K ~ ds_salaries$remote_ratio, xlab = "",ylab = "Salary (in 10K)",main = "Remote ratio")
boxplot(ds_salaries$salary_in_usd_10K ~ ds_salaries$is_us_company, xlab = "",ylab = "Salary (in 10K)",main = "In US company")
boxplot(ds_salaries$salary_in_usd_10K ~ ds_salaries$company_size, xlab = "",ylab = "Salary (in 10K)",main = "Company_size")
dev.off()
set.seed(42)
sample <- sample(c(TRUE, FALSE), nrow(ds_salaries), replace=TRUE, prob=c(0.7,0.3))
train  <- ds_salaries[sample, ]
test   <- ds_salaries[!sample, ]
lm.model = lm(sqrt(salary_in_usd_10K) ~  is_22 + experience_level  + remote_ratio  + is_us_company + company_size, train)
png("figure/predict_plot.png")
plot(test$salary_in_usd_10K, predict(lm.model,test)^2, xlab = "Oberseved", ylab = "Predicted",main = "Test data (Correlation 0.7)")
abline(0,1)
dev.off()
View(ds_salaries)
colnames(ds_salaries)
library(shiny)
library(dplyr)
ds_salaries = read.csv("derived_data/salary.csv",row.names = 1)
if_function = function(input,ds_salaries){
if (input$year != "All"){
ds_salaries = ds_salaries[ds_salaries$work_year == input$year,]
}
if (input$exper_level != "All"){
level = strsplit(input$exper_level," ")[[1]][1]
ds_salaries = ds_salaries[ds_salaries$experience_level == level,]
}
if (input$remote != "All"){
rr = gsub("%","",input$remote)
ds_salaries = ds_salaries[ds_salaries$remote == rr,]
}
if (input$uscom != "All"){
TF = ifelse(input$uscom == "Yes",T,F)
ds_salaries = ds_salaries[ds_salaries$is_us_company == TF,]
}
if (input$size != "All"){
size = strsplit(input$size,"")[[1]][1]
ds_salaries = ds_salaries[ds_salaries$company_size == size,]
}
ds_salaries = ds_salaries %>% select(work_year,experience_level,employment_type,job_title,remote_ratio,company_location,company_size,salary_in_usd_10K)
return(ds_salaries)
}
ui <- fluidPage(
titlePanel("Select to filter data and visualize the data!!"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year",
label = "Work year",
choices = c("All","2020","2021","2022")),
selectInput(inputId = "exper_level",
label = "Experience Level",
choices = c("All",
"EN Entry level or Junior",
"MI Mid level or intermediate",
"SE Senior or expert",
"EX Executive-level or director")),
radioButtons(inputId = "remote",
label = "Remote ratio",
choices = c("All","0%","50%","100%")),
radioButtons(inputId = "uscom",
label = "Is company located in US?",
choices = c("All","No","Yes")),
radioButtons(inputId = "size",
label = "Company Size",
choices = c("All","Small (less than 50 employees)",
"Medium (50 to 250 employees)",
"Large (more than 250 employees)")),
),
mainPanel(
plotOutput(outputId = "box"),
tableOutput(outputId = "table")
)
)
)
server <- function(input, output) {
output$box <- renderPlot({
ds_salaries = if_function(input = input,ds_salaries =ds_salaries )
boxplot(ds_salaries$salary_in_usd_10K, col = "#75AADB",
xlab = "",
main = "Boxplot of salary in USD for filtered data scientists",ylim = c(0,60))
})
output$table = renderTable({
if_function(input = input,ds_salaries =ds_salaries )
})
}
shinyApp(ui = htmlTemplate("ui.html"), server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server ,launch.browser = TRUE)
shinyApp(ui = ui, server = server)
setwd("~/Documents/GitHub/datasci611/lectures/07-Make-and-Makefiles")
setwd("~/Documents/GitHub/datasci611")
setwd("~/Documents/GitHub/bios-611-project")
